// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/nft.proto

package nft

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/structpb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Nft service

func NewNftEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Nft service

type NftService interface {
	Assets(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*AssetsResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Collections(ctx context.Context, in *CollectionsRequest, opts ...client.CallOption) (*CollectionsResponse, error)
	Asset(ctx context.Context, in *AssetRequest, opts ...client.CallOption) (*AssetResponse, error)
	Collection(ctx context.Context, in *CollectionRequest, opts ...client.CallOption) (*CollectionResponse, error)
}

type nftService struct {
	c    client.Client
	name string
}

func NewNftService(name string, c client.Client) NftService {
	return &nftService{
		c:    c,
		name: name,
	}
}

func (c *nftService) Assets(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*AssetsResponse, error) {
	req := c.c.NewRequest(c.name, "Nft.Assets", in)
	out := new(AssetsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Nft.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftService) Collections(ctx context.Context, in *CollectionsRequest, opts ...client.CallOption) (*CollectionsResponse, error) {
	req := c.c.NewRequest(c.name, "Nft.Collections", in)
	out := new(CollectionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftService) Asset(ctx context.Context, in *AssetRequest, opts ...client.CallOption) (*AssetResponse, error) {
	req := c.c.NewRequest(c.name, "Nft.Asset", in)
	out := new(AssetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftService) Collection(ctx context.Context, in *CollectionRequest, opts ...client.CallOption) (*CollectionResponse, error) {
	req := c.c.NewRequest(c.name, "Nft.Collection", in)
	out := new(CollectionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nft service

type NftHandler interface {
	Assets(context.Context, *AssetsRequest, *AssetsResponse) error
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Collections(context.Context, *CollectionsRequest, *CollectionsResponse) error
	Asset(context.Context, *AssetRequest, *AssetResponse) error
	Collection(context.Context, *CollectionRequest, *CollectionResponse) error
}

func RegisterNftHandler(s server.Server, hdlr NftHandler, opts ...server.HandlerOption) error {
	type nft interface {
		Assets(ctx context.Context, in *AssetsRequest, out *AssetsResponse) error
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Collections(ctx context.Context, in *CollectionsRequest, out *CollectionsResponse) error
		Asset(ctx context.Context, in *AssetRequest, out *AssetResponse) error
		Collection(ctx context.Context, in *CollectionRequest, out *CollectionResponse) error
	}
	type Nft struct {
		nft
	}
	h := &nftHandler{hdlr}
	return s.Handle(s.NewHandler(&Nft{h}, opts...))
}

type nftHandler struct {
	NftHandler
}

func (h *nftHandler) Assets(ctx context.Context, in *AssetsRequest, out *AssetsResponse) error {
	return h.NftHandler.Assets(ctx, in, out)
}

func (h *nftHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.NftHandler.Create(ctx, in, out)
}

func (h *nftHandler) Collections(ctx context.Context, in *CollectionsRequest, out *CollectionsResponse) error {
	return h.NftHandler.Collections(ctx, in, out)
}

func (h *nftHandler) Asset(ctx context.Context, in *AssetRequest, out *AssetResponse) error {
	return h.NftHandler.Asset(ctx, in, out)
}

func (h *nftHandler) Collection(ctx context.Context, in *CollectionRequest, out *CollectionResponse) error {
	return h.NftHandler.Collection(ctx, in, out)
}
