// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/evchargers.proto

package evchargers

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Evchargers service

func NewEvchargersEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Evchargers service

type EvchargersService interface {
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	ReferenceData(ctx context.Context, in *ReferenceDataRequest, opts ...client.CallOption) (*ReferenceDataResponse, error)
}

type evchargersService struct {
	c    client.Client
	name string
}

func NewEvchargersService(name string, c client.Client) EvchargersService {
	return &evchargersService{
		c:    c,
		name: name,
	}
}

func (c *evchargersService) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.name, "Evchargers.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evchargersService) ReferenceData(ctx context.Context, in *ReferenceDataRequest, opts ...client.CallOption) (*ReferenceDataResponse, error) {
	req := c.c.NewRequest(c.name, "Evchargers.ReferenceData", in)
	out := new(ReferenceDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Evchargers service

type EvchargersHandler interface {
	Search(context.Context, *SearchRequest, *SearchResponse) error
	ReferenceData(context.Context, *ReferenceDataRequest, *ReferenceDataResponse) error
}

func RegisterEvchargersHandler(s server.Server, hdlr EvchargersHandler, opts ...server.HandlerOption) error {
	type evchargers interface {
		Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error
		ReferenceData(ctx context.Context, in *ReferenceDataRequest, out *ReferenceDataResponse) error
	}
	type Evchargers struct {
		evchargers
	}
	h := &evchargersHandler{hdlr}
	return s.Handle(s.NewHandler(&Evchargers{h}, opts...))
}

type evchargersHandler struct {
	EvchargersHandler
}

func (h *evchargersHandler) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.EvchargersHandler.Search(ctx, in, out)
}

func (h *evchargersHandler) ReferenceData(ctx context.Context, in *ReferenceDataRequest, out *ReferenceDataResponse) error {
	return h.EvchargersHandler.ReferenceData(ctx, in, out)
}
