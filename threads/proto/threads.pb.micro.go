// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/threads.proto

package threads

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Threads service

func NewThreadsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Threads service

type ThreadsService interface {
	// Create a conversation
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...client.CallOption) (*CreateConversationResponse, error)
	// Read a conversation using its ID, can filter using group ID if provided
	ReadConversation(ctx context.Context, in *ReadConversationRequest, opts ...client.CallOption) (*ReadConversationResponse, error)
	// Update a conversations topic
	UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...client.CallOption) (*UpdateConversationResponse, error)
	// Delete a conversation and all the messages within
	DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...client.CallOption) (*DeleteConversationResponse, error)
	// List all the conversations for a group
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...client.CallOption) (*ListConversationsResponse, error)
	// Create a message within a conversation
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...client.CallOption) (*CreateMessageResponse, error)
	// List the messages within a conversation in reverse chronological order, using sent_before to
	// offset as older messages need to be loaded
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...client.CallOption) (*ListMessagesResponse, error)
	// RecentMessages returns the most recent messages in a group of conversations. By default the
	// most messages retrieved per conversation is 25, however this can be overriden using the
	// limit_per_conversation option
	RecentMessages(ctx context.Context, in *RecentMessagesRequest, opts ...client.CallOption) (*RecentMessagesResponse, error)
}

type threadsService struct {
	c    client.Client
	name string
}

func NewThreadsService(name string, c client.Client) ThreadsService {
	return &threadsService{
		c:    c,
		name: name,
	}
}

func (c *threadsService) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...client.CallOption) (*CreateConversationResponse, error) {
	req := c.c.NewRequest(c.name, "Threads.CreateConversation", in)
	out := new(CreateConversationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsService) ReadConversation(ctx context.Context, in *ReadConversationRequest, opts ...client.CallOption) (*ReadConversationResponse, error) {
	req := c.c.NewRequest(c.name, "Threads.ReadConversation", in)
	out := new(ReadConversationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsService) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...client.CallOption) (*UpdateConversationResponse, error) {
	req := c.c.NewRequest(c.name, "Threads.UpdateConversation", in)
	out := new(UpdateConversationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsService) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...client.CallOption) (*DeleteConversationResponse, error) {
	req := c.c.NewRequest(c.name, "Threads.DeleteConversation", in)
	out := new(DeleteConversationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsService) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...client.CallOption) (*ListConversationsResponse, error) {
	req := c.c.NewRequest(c.name, "Threads.ListConversations", in)
	out := new(ListConversationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsService) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...client.CallOption) (*CreateMessageResponse, error) {
	req := c.c.NewRequest(c.name, "Threads.CreateMessage", in)
	out := new(CreateMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsService) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...client.CallOption) (*ListMessagesResponse, error) {
	req := c.c.NewRequest(c.name, "Threads.ListMessages", in)
	out := new(ListMessagesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsService) RecentMessages(ctx context.Context, in *RecentMessagesRequest, opts ...client.CallOption) (*RecentMessagesResponse, error) {
	req := c.c.NewRequest(c.name, "Threads.RecentMessages", in)
	out := new(RecentMessagesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Threads service

type ThreadsHandler interface {
	// Create a conversation
	CreateConversation(context.Context, *CreateConversationRequest, *CreateConversationResponse) error
	// Read a conversation using its ID, can filter using group ID if provided
	ReadConversation(context.Context, *ReadConversationRequest, *ReadConversationResponse) error
	// Update a conversations topic
	UpdateConversation(context.Context, *UpdateConversationRequest, *UpdateConversationResponse) error
	// Delete a conversation and all the messages within
	DeleteConversation(context.Context, *DeleteConversationRequest, *DeleteConversationResponse) error
	// List all the conversations for a group
	ListConversations(context.Context, *ListConversationsRequest, *ListConversationsResponse) error
	// Create a message within a conversation
	CreateMessage(context.Context, *CreateMessageRequest, *CreateMessageResponse) error
	// List the messages within a conversation in reverse chronological order, using sent_before to
	// offset as older messages need to be loaded
	ListMessages(context.Context, *ListMessagesRequest, *ListMessagesResponse) error
	// RecentMessages returns the most recent messages in a group of conversations. By default the
	// most messages retrieved per conversation is 25, however this can be overriden using the
	// limit_per_conversation option
	RecentMessages(context.Context, *RecentMessagesRequest, *RecentMessagesResponse) error
}

func RegisterThreadsHandler(s server.Server, hdlr ThreadsHandler, opts ...server.HandlerOption) error {
	type threads interface {
		CreateConversation(ctx context.Context, in *CreateConversationRequest, out *CreateConversationResponse) error
		ReadConversation(ctx context.Context, in *ReadConversationRequest, out *ReadConversationResponse) error
		UpdateConversation(ctx context.Context, in *UpdateConversationRequest, out *UpdateConversationResponse) error
		DeleteConversation(ctx context.Context, in *DeleteConversationRequest, out *DeleteConversationResponse) error
		ListConversations(ctx context.Context, in *ListConversationsRequest, out *ListConversationsResponse) error
		CreateMessage(ctx context.Context, in *CreateMessageRequest, out *CreateMessageResponse) error
		ListMessages(ctx context.Context, in *ListMessagesRequest, out *ListMessagesResponse) error
		RecentMessages(ctx context.Context, in *RecentMessagesRequest, out *RecentMessagesResponse) error
	}
	type Threads struct {
		threads
	}
	h := &threadsHandler{hdlr}
	return s.Handle(s.NewHandler(&Threads{h}, opts...))
}

type threadsHandler struct {
	ThreadsHandler
}

func (h *threadsHandler) CreateConversation(ctx context.Context, in *CreateConversationRequest, out *CreateConversationResponse) error {
	return h.ThreadsHandler.CreateConversation(ctx, in, out)
}

func (h *threadsHandler) ReadConversation(ctx context.Context, in *ReadConversationRequest, out *ReadConversationResponse) error {
	return h.ThreadsHandler.ReadConversation(ctx, in, out)
}

func (h *threadsHandler) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, out *UpdateConversationResponse) error {
	return h.ThreadsHandler.UpdateConversation(ctx, in, out)
}

func (h *threadsHandler) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, out *DeleteConversationResponse) error {
	return h.ThreadsHandler.DeleteConversation(ctx, in, out)
}

func (h *threadsHandler) ListConversations(ctx context.Context, in *ListConversationsRequest, out *ListConversationsResponse) error {
	return h.ThreadsHandler.ListConversations(ctx, in, out)
}

func (h *threadsHandler) CreateMessage(ctx context.Context, in *CreateMessageRequest, out *CreateMessageResponse) error {
	return h.ThreadsHandler.CreateMessage(ctx, in, out)
}

func (h *threadsHandler) ListMessages(ctx context.Context, in *ListMessagesRequest, out *ListMessagesResponse) error {
	return h.ThreadsHandler.ListMessages(ctx, in, out)
}

func (h *threadsHandler) RecentMessages(ctx context.Context, in *RecentMessagesRequest, out *RecentMessagesResponse) error {
	return h.ThreadsHandler.RecentMessages(ctx, in, out)
}
