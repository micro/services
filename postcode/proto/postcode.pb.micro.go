// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/postcode.proto

package postcode

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Postcode service

func NewPostcodeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Postcode service

type PostcodeService interface {
	Lookup(ctx context.Context, in *LookupRequest, opts ...client.CallOption) (*LookupResponse, error)
	Random(ctx context.Context, in *RandomRequest, opts ...client.CallOption) (*RandomResponse, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...client.CallOption) (*ValidateResponse, error)
}

type postcodeService struct {
	c    client.Client
	name string
}

func NewPostcodeService(name string, c client.Client) PostcodeService {
	return &postcodeService{
		c:    c,
		name: name,
	}
}

func (c *postcodeService) Lookup(ctx context.Context, in *LookupRequest, opts ...client.CallOption) (*LookupResponse, error) {
	req := c.c.NewRequest(c.name, "Postcode.Lookup", in)
	out := new(LookupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postcodeService) Random(ctx context.Context, in *RandomRequest, opts ...client.CallOption) (*RandomResponse, error) {
	req := c.c.NewRequest(c.name, "Postcode.Random", in)
	out := new(RandomResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postcodeService) Validate(ctx context.Context, in *ValidateRequest, opts ...client.CallOption) (*ValidateResponse, error) {
	req := c.c.NewRequest(c.name, "Postcode.Validate", in)
	out := new(ValidateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Postcode service

type PostcodeHandler interface {
	Lookup(context.Context, *LookupRequest, *LookupResponse) error
	Random(context.Context, *RandomRequest, *RandomResponse) error
	Validate(context.Context, *ValidateRequest, *ValidateResponse) error
}

func RegisterPostcodeHandler(s server.Server, hdlr PostcodeHandler, opts ...server.HandlerOption) error {
	type postcode interface {
		Lookup(ctx context.Context, in *LookupRequest, out *LookupResponse) error
		Random(ctx context.Context, in *RandomRequest, out *RandomResponse) error
		Validate(ctx context.Context, in *ValidateRequest, out *ValidateResponse) error
	}
	type Postcode struct {
		postcode
	}
	h := &postcodeHandler{hdlr}
	return s.Handle(s.NewHandler(&Postcode{h}, opts...))
}

type postcodeHandler struct {
	PostcodeHandler
}

func (h *postcodeHandler) Lookup(ctx context.Context, in *LookupRequest, out *LookupResponse) error {
	return h.PostcodeHandler.Lookup(ctx, in, out)
}

func (h *postcodeHandler) Random(ctx context.Context, in *RandomRequest, out *RandomResponse) error {
	return h.PostcodeHandler.Random(ctx, in, out)
}

func (h *postcodeHandler) Validate(ctx context.Context, in *ValidateRequest, out *ValidateResponse) error {
	return h.PostcodeHandler.Validate(ctx, in, out)
}
