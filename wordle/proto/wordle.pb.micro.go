// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/wordle.proto

package wordle

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Wordle service

func NewWordleEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Wordle service

type WordleService interface {
	Guess(ctx context.Context, in *GuessRequest, opts ...client.CallOption) (*GuessResponse, error)
	Next(ctx context.Context, in *NextRequest, opts ...client.CallOption) (*NextResponse, error)
}

type wordleService struct {
	c    client.Client
	name string
}

func NewWordleService(name string, c client.Client) WordleService {
	return &wordleService{
		c:    c,
		name: name,
	}
}

func (c *wordleService) Guess(ctx context.Context, in *GuessRequest, opts ...client.CallOption) (*GuessResponse, error) {
	req := c.c.NewRequest(c.name, "Wordle.Guess", in)
	out := new(GuessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordleService) Next(ctx context.Context, in *NextRequest, opts ...client.CallOption) (*NextResponse, error) {
	req := c.c.NewRequest(c.name, "Wordle.Next", in)
	out := new(NextResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wordle service

type WordleHandler interface {
	Guess(context.Context, *GuessRequest, *GuessResponse) error
	Next(context.Context, *NextRequest, *NextResponse) error
}

func RegisterWordleHandler(s server.Server, hdlr WordleHandler, opts ...server.HandlerOption) error {
	type wordle interface {
		Guess(ctx context.Context, in *GuessRequest, out *GuessResponse) error
		Next(ctx context.Context, in *NextRequest, out *NextResponse) error
	}
	type Wordle struct {
		wordle
	}
	h := &wordleHandler{hdlr}
	return s.Handle(s.NewHandler(&Wordle{h}, opts...))
}

type wordleHandler struct {
	WordleHandler
}

func (h *wordleHandler) Guess(ctx context.Context, in *GuessRequest, out *GuessResponse) error {
	return h.WordleHandler.Guess(ctx, in, out)
}

func (h *wordleHandler) Next(ctx context.Context, in *NextRequest, out *NextResponse) error {
	return h.WordleHandler.Next(ctx, in, out)
}
