// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.5
// source: proto/weather.proto

package weather

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Forecast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// date of the forecast
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// max temp in celsius
	MaxTempC float64 `protobuf:"fixed64,2,opt,name=max_temp_c,json=maxTempC,proto3" json:"max_temp_c,omitempty"`
	// max temp in fahrenheit
	MaxTempF float64 `protobuf:"fixed64,3,opt,name=max_temp_f,json=maxTempF,proto3" json:"max_temp_f,omitempty"`
	// minimum temp in celsius
	MinTempC float64 `protobuf:"fixed64,4,opt,name=min_temp_c,json=minTempC,proto3" json:"min_temp_c,omitempty"`
	// minimum temp in fahrenheit
	MinTempF float64 `protobuf:"fixed64,5,opt,name=min_temp_f,json=minTempF,proto3" json:"min_temp_f,omitempty"`
	// the average temp in celsius
	AvgTempC float64 `protobuf:"fixed64,6,opt,name=avg_temp_c,json=avgTempC,proto3" json:"avg_temp_c,omitempty"`
	// the average temp in fahrenheit
	AvgTempF float64 `protobuf:"fixed64,7,opt,name=avg_temp_f,json=avgTempF,proto3" json:"avg_temp_f,omitempty"`
	// will it rain
	WillItRain bool `protobuf:"varint,8,opt,name=will_it_rain,json=willItRain,proto3" json:"will_it_rain,omitempty"`
	// chance of rain (percentage)
	ChanceOfRain int32 `protobuf:"varint,9,opt,name=chance_of_rain,json=chanceOfRain,proto3" json:"chance_of_rain,omitempty"`
	// forecast condition
	Condition string `protobuf:"bytes,10,opt,name=condition,proto3" json:"condition,omitempty"`
	// the URL of forecast condition icon. Simply prefix with either http or https to use it
	IconUrl string `protobuf:"bytes,11,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	// time of sunrise
	Sunrise string `protobuf:"bytes,12,opt,name=sunrise,proto3" json:"sunrise,omitempty"`
	// time of sunset
	Sunset string `protobuf:"bytes,13,opt,name=sunset,proto3" json:"sunset,omitempty"`
	// max wind speed mph
	MaxWindMph float64 `protobuf:"fixed64,14,opt,name=max_wind_mph,json=maxWindMph,proto3" json:"max_wind_mph,omitempty"`
	// max wind speed kph
	MaxWindKph float64 `protobuf:"fixed64,15,opt,name=max_wind_kph,json=maxWindKph,proto3" json:"max_wind_kph,omitempty"`
}

func (x *Forecast) Reset() {
	*x = Forecast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_weather_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forecast) ProtoMessage() {}

func (x *Forecast) ProtoReflect() protoreflect.Message {
	mi := &file_proto_weather_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forecast.ProtoReflect.Descriptor instead.
func (*Forecast) Descriptor() ([]byte, []int) {
	return file_proto_weather_proto_rawDescGZIP(), []int{0}
}

func (x *Forecast) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Forecast) GetMaxTempC() float64 {
	if x != nil {
		return x.MaxTempC
	}
	return 0
}

func (x *Forecast) GetMaxTempF() float64 {
	if x != nil {
		return x.MaxTempF
	}
	return 0
}

func (x *Forecast) GetMinTempC() float64 {
	if x != nil {
		return x.MinTempC
	}
	return 0
}

func (x *Forecast) GetMinTempF() float64 {
	if x != nil {
		return x.MinTempF
	}
	return 0
}

func (x *Forecast) GetAvgTempC() float64 {
	if x != nil {
		return x.AvgTempC
	}
	return 0
}

func (x *Forecast) GetAvgTempF() float64 {
	if x != nil {
		return x.AvgTempF
	}
	return 0
}

func (x *Forecast) GetWillItRain() bool {
	if x != nil {
		return x.WillItRain
	}
	return false
}

func (x *Forecast) GetChanceOfRain() int32 {
	if x != nil {
		return x.ChanceOfRain
	}
	return 0
}

func (x *Forecast) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *Forecast) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *Forecast) GetSunrise() string {
	if x != nil {
		return x.Sunrise
	}
	return ""
}

func (x *Forecast) GetSunset() string {
	if x != nil {
		return x.Sunset
	}
	return ""
}

func (x *Forecast) GetMaxWindMph() float64 {
	if x != nil {
		return x.MaxWindMph
	}
	return 0
}

func (x *Forecast) GetMaxWindKph() float64 {
	if x != nil {
		return x.MaxWindKph
	}
	return 0
}

// Get the weather forecast for the next 1-10 days
type ForecastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// location of the forecase
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// number of days. default 1, max 10
	Days int32 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *ForecastRequest) Reset() {
	*x = ForecastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_weather_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForecastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastRequest) ProtoMessage() {}

func (x *ForecastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_weather_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastRequest.ProtoReflect.Descriptor instead.
func (*ForecastRequest) Descriptor() ([]byte, []int) {
	return file_proto_weather_proto_rawDescGZIP(), []int{1}
}

func (x *ForecastRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ForecastRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type ForecastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// location of the request
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// region related to the location
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// country of the request
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	// e.g 37.55
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// e.g -77.46
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// timezone of the location
	Timezone string `protobuf:"bytes,6,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// the local time
	LocalTime string `protobuf:"bytes,7,opt,name=local_time,json=localTime,proto3" json:"local_time,omitempty"`
	// forecast for the next number of days
	Forecast []*Forecast `protobuf:"bytes,8,rep,name=forecast,proto3" json:"forecast,omitempty"`
}

func (x *ForecastResponse) Reset() {
	*x = ForecastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_weather_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForecastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastResponse) ProtoMessage() {}

func (x *ForecastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_weather_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastResponse.ProtoReflect.Descriptor instead.
func (*ForecastResponse) Descriptor() ([]byte, []int) {
	return file_proto_weather_proto_rawDescGZIP(), []int{2}
}

func (x *ForecastResponse) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ForecastResponse) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ForecastResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ForecastResponse) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ForecastResponse) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *ForecastResponse) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *ForecastResponse) GetLocalTime() string {
	if x != nil {
		return x.LocalTime
	}
	return ""
}

func (x *ForecastResponse) GetForecast() []*Forecast {
	if x != nil {
		return x.Forecast
	}
	return nil
}

// Get the current weather report for a location by postcode, city, zip code, ip address
type NowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// location to get weather e.g postcode, city
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *NowRequest) Reset() {
	*x = NowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_weather_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NowRequest) ProtoMessage() {}

func (x *NowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_weather_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NowRequest.ProtoReflect.Descriptor instead.
func (*NowRequest) Descriptor() ([]byte, []int) {
	return file_proto_weather_proto_rawDescGZIP(), []int{3}
}

func (x *NowRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type NowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// location of the request
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// region related to the location
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// country of the request
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	// e.g 37.55
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// e.g -77.46
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// timezone of the location
	Timezone string `protobuf:"bytes,6,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// the local time
	LocalTime string `protobuf:"bytes,7,opt,name=local_time,json=localTime,proto3" json:"local_time,omitempty"`
	// temperature in celsius
	TempC float64 `protobuf:"fixed64,8,opt,name=temp_c,json=tempC,proto3" json:"temp_c,omitempty"`
	// temperature in fahrenheit
	TempF float64 `protobuf:"fixed64,9,opt,name=temp_f,json=tempF,proto3" json:"temp_f,omitempty"`
	// feels like in celsius
	FeelsLikeC float64 `protobuf:"fixed64,10,opt,name=feels_like_c,json=feelsLikeC,proto3" json:"feels_like_c,omitempty"`
	// feels like in fahrenheit
	FeelsLikeF float64 `protobuf:"fixed64,11,opt,name=feels_like_f,json=feelsLikeF,proto3" json:"feels_like_f,omitempty"`
	// the humidity percentage
	Humidity int32 `protobuf:"varint,12,opt,name=humidity,proto3" json:"humidity,omitempty"`
	// cloud cover percentage
	Cloud int32 `protobuf:"varint,13,opt,name=cloud,proto3" json:"cloud,omitempty"`
	// whether its daytime
	Daytime bool `protobuf:"varint,14,opt,name=daytime,proto3" json:"daytime,omitempty"`
	// the weather condition
	Condition string `protobuf:"bytes,15,opt,name=condition,proto3" json:"condition,omitempty"`
	// the URL of the related icon. Simply prefix with either http or https to use it
	IconUrl string `protobuf:"bytes,16,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	// wind in mph
	WindMph float64 `protobuf:"fixed64,17,opt,name=wind_mph,json=windMph,proto3" json:"wind_mph,omitempty"`
	// wind in kph
	WindKph float64 `protobuf:"fixed64,18,opt,name=wind_kph,json=windKph,proto3" json:"wind_kph,omitempty"`
	// wind direction
	WindDirection string `protobuf:"bytes,19,opt,name=wind_direction,json=windDirection,proto3" json:"wind_direction,omitempty"`
	// wind degree
	WindDegree int32 `protobuf:"varint,20,opt,name=wind_degree,json=windDegree,proto3" json:"wind_degree,omitempty"`
}

func (x *NowResponse) Reset() {
	*x = NowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_weather_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NowResponse) ProtoMessage() {}

func (x *NowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_weather_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NowResponse.ProtoReflect.Descriptor instead.
func (*NowResponse) Descriptor() ([]byte, []int) {
	return file_proto_weather_proto_rawDescGZIP(), []int{4}
}

func (x *NowResponse) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *NowResponse) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *NowResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *NowResponse) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *NowResponse) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *NowResponse) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *NowResponse) GetLocalTime() string {
	if x != nil {
		return x.LocalTime
	}
	return ""
}

func (x *NowResponse) GetTempC() float64 {
	if x != nil {
		return x.TempC
	}
	return 0
}

func (x *NowResponse) GetTempF() float64 {
	if x != nil {
		return x.TempF
	}
	return 0
}

func (x *NowResponse) GetFeelsLikeC() float64 {
	if x != nil {
		return x.FeelsLikeC
	}
	return 0
}

func (x *NowResponse) GetFeelsLikeF() float64 {
	if x != nil {
		return x.FeelsLikeF
	}
	return 0
}

func (x *NowResponse) GetHumidity() int32 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

func (x *NowResponse) GetCloud() int32 {
	if x != nil {
		return x.Cloud
	}
	return 0
}

func (x *NowResponse) GetDaytime() bool {
	if x != nil {
		return x.Daytime
	}
	return false
}

func (x *NowResponse) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *NowResponse) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *NowResponse) GetWindMph() float64 {
	if x != nil {
		return x.WindMph
	}
	return 0
}

func (x *NowResponse) GetWindKph() float64 {
	if x != nil {
		return x.WindKph
	}
	return 0
}

func (x *NowResponse) GetWindDirection() string {
	if x != nil {
		return x.WindDirection
	}
	return ""
}

func (x *NowResponse) GetWindDegree() int32 {
	if x != nil {
		return x.WindDegree
	}
	return 0
}

var File_proto_weather_proto protoreflect.FileDescriptor

var file_proto_weather_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x22, 0xc9,
	0x03, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x6d, 0x70, 0x43, 0x12, 0x1c, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x6d, 0x70, 0x46, 0x12, 0x1c, 0x0a, 0x0a, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x43, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x46, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x5f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67,
	0x54, 0x65, 0x6d, 0x70, 0x43, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x5f, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x54, 0x65,
	0x6d, 0x70, 0x46, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x74, 0x5f, 0x72,
	0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x6c, 0x6c, 0x49,
	0x74, 0x52, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x66, 0x52, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x5f, 0x6d, 0x70, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x57, 0x69, 0x6e, 0x64, 0x4d, 0x70, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x5f, 0x6b, 0x70, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x57, 0x69, 0x6e, 0x64, 0x4b, 0x70, 0x68, 0x22, 0x41, 0x0a, 0x0f, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0x84, 0x02,
	0x0a, 0x10, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x0a, 0x4e, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5,
	0x04, 0x0a, 0x0b, 0x4e, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x43, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x65, 0x6d, 0x70,
	0x5f, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x46, 0x12,
	0x20, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65,
	0x43, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f,
	0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69,
	0x6b, 0x65, 0x46, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64,
	0x5f, 0x6d, 0x70, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64,
	0x4d, 0x70, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x6b, 0x70, 0x68, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x4b, 0x70, 0x68, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64,
	0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x32, 0x80, 0x01, 0x0a, 0x07, 0x57, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x03, 0x4e, 0x6f, 0x77, 0x12, 0x13, 0x2e, 0x77, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x18, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x77,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_weather_proto_rawDescOnce sync.Once
	file_proto_weather_proto_rawDescData = file_proto_weather_proto_rawDesc
)

func file_proto_weather_proto_rawDescGZIP() []byte {
	file_proto_weather_proto_rawDescOnce.Do(func() {
		file_proto_weather_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_weather_proto_rawDescData)
	})
	return file_proto_weather_proto_rawDescData
}

var file_proto_weather_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_weather_proto_goTypes = []interface{}{
	(*Forecast)(nil),         // 0: weather.Forecast
	(*ForecastRequest)(nil),  // 1: weather.ForecastRequest
	(*ForecastResponse)(nil), // 2: weather.ForecastResponse
	(*NowRequest)(nil),       // 3: weather.NowRequest
	(*NowResponse)(nil),      // 4: weather.NowResponse
}
var file_proto_weather_proto_depIdxs = []int32{
	0, // 0: weather.ForecastResponse.forecast:type_name -> weather.Forecast
	3, // 1: weather.Weather.Now:input_type -> weather.NowRequest
	1, // 2: weather.Weather.Forecast:input_type -> weather.ForecastRequest
	4, // 3: weather.Weather.Now:output_type -> weather.NowResponse
	2, // 4: weather.Weather.Forecast:output_type -> weather.ForecastResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_weather_proto_init() }
func file_proto_weather_proto_init() {
	if File_proto_weather_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_weather_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forecast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_weather_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForecastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_weather_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForecastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_weather_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_weather_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_weather_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_weather_proto_goTypes,
		DependencyIndexes: file_proto_weather_proto_depIdxs,
		MessageInfos:      file_proto_weather_proto_msgTypes,
	}.Build()
	File_proto_weather_proto = out.File
	file_proto_weather_proto_rawDesc = nil
	file_proto_weather_proto_goTypes = nil
	file_proto_weather_proto_depIdxs = nil
}
