syntax = "proto3";

import "google/protobuf/struct.proto";

package search;

option go_package = "./proto;search";

service Search {
	// TODO reinstate when we have a reason for more fine grained control of index creation, for now just rely on lazy creation on first index call
	//	rpc CreateIndex(CreateIndexRequest) returns (CreateIndexResponse) {}

	rpc Index(IndexRequest) returns (IndexResponse) {}
	rpc Delete(DeleteRequest) returns (DeleteResponse) {}
	rpc Search(SearchRequest) returns (SearchResponse) {}
	rpc DeleteIndex(DeleteIndexRequest) returns (DeleteIndexResponse) {}

}

// Index a document i.e. insert a document to search for. If the index for the document does not exist it will be created on the fly.
message IndexRequest {
	// The document to index
	Document document = 1;
	// The index this document belongs to
	string index_name = 2;

}

message Document {
	// The ID for this document. If blank, one will be generated
	string id = 1;
	// The JSON contents of the document
	google.protobuf.Struct contents = 2;
}

message IndexResponse {
	string id = 1;
}

// Delete a document given its ID
message DeleteRequest {
	// The ID of the document to delete
	string id = 1;
	// The index the document belongs to
	string index_name = 2;
}

message DeleteResponse {}

// Search for documents in a given in index
message SearchRequest {
	// The index the document belongs to
	string index_name = 1;

	// The query
	QueryDef query = 2;

	//	bool fuzzy = 3; // TODO
}

message QueryDef {
	// The fields to search/match on
	repeated FieldQuery fields = 2;
	// Boolean operator for the fields be combined with - `and` or `or`
	string operator = 3;
	// Should we treat the search as a prefix rather than having to match the whole word?
	bool prefix = 4;

	//	repeated QueryDef queries = 1; // TODO reinstate once we fix protoc openapi3 recursive generation

}

message FieldQuery {
	// The name of the field
	string field_name = 1;
	// The value to look for
	string value = 2;

	// TODO add an operator field for complex things like >, <, etc.
}

message SearchResponse {
	// The matching documents
	repeated Document documents = 1;

}

// Create a search index by specifying which fields are to be queried
message CreateIndexRequest {
	string index_name = 1;
	repeated Field fields = 2;
}

message Field {
	// The name of the field. Use a `.` separator to define nested fields e.g. foo.bar
	string name = 1;
	// The type of the field - string, number
	string type = 2;
}

message CreateIndexResponse {}

// Delete an index.
message DeleteIndexRequest {
	// The name of the index to delete
	string index_name = 1;
}

message DeleteIndexResponse {}
