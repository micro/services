// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/codes.proto

package codes

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Codes service

func NewCodesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Codes service

type CodesService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error)
}

type codesService struct {
	c    client.Client
	name string
}

func NewCodesService(name string, c client.Client) CodesService {
	return &codesService{
		c:    c,
		name: name,
	}
}

func (c *codesService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Codes.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codesService) Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error) {
	req := c.c.NewRequest(c.name, "Codes.Verify", in)
	out := new(VerifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Codes service

type CodesHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Verify(context.Context, *VerifyRequest, *VerifyResponse) error
}

func RegisterCodesHandler(s server.Server, hdlr CodesHandler, opts ...server.HandlerOption) error {
	type codes interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error
	}
	type Codes struct {
		codes
	}
	h := &codesHandler{hdlr}
	return s.Handle(s.NewHandler(&Codes{h}, opts...))
}

type codesHandler struct {
	CodesHandler
}

func (h *codesHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.CodesHandler.Create(ctx, in, out)
}

func (h *codesHandler) Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error {
	return h.CodesHandler.Verify(ctx, in, out)
}
