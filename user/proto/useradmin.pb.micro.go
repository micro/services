// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/useradmin.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserAdmin service

func NewUserAdminEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserAdmin service

type UserAdminService interface {
	MigrateSessions(ctx context.Context, in *MigrateSessionsRequest, opts ...client.CallOption) (*MigrateSessionsResponse, error)
}

type userAdminService struct {
	c    client.Client
	name string
}

func NewUserAdminService(name string, c client.Client) UserAdminService {
	return &userAdminService{
		c:    c,
		name: name,
	}
}

func (c *userAdminService) MigrateSessions(ctx context.Context, in *MigrateSessionsRequest, opts ...client.CallOption) (*MigrateSessionsResponse, error) {
	req := c.c.NewRequest(c.name, "UserAdmin.MigrateSessions", in)
	out := new(MigrateSessionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAdmin service

type UserAdminHandler interface {
	MigrateSessions(context.Context, *MigrateSessionsRequest, *MigrateSessionsResponse) error
}

func RegisterUserAdminHandler(s server.Server, hdlr UserAdminHandler, opts ...server.HandlerOption) error {
	type userAdmin interface {
		MigrateSessions(ctx context.Context, in *MigrateSessionsRequest, out *MigrateSessionsResponse) error
	}
	type UserAdmin struct {
		userAdmin
	}
	h := &userAdminHandler{hdlr}
	return s.Handle(s.NewHandler(&UserAdmin{h}, opts...))
}

type userAdminHandler struct {
	UserAdminHandler
}

func (h *userAdminHandler) MigrateSessions(ctx context.Context, in *MigrateSessionsRequest, out *MigrateSessionsResponse) error {
	return h.UserAdminHandler.MigrateSessions(ctx, in, out)
}
